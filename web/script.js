// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SPREADSHEET_ID = '1o7-XTymP0__T2fNd0wYuw3NrrCCX8GlvOThlj8UHwAA';
const SHEET_NAME = '–î–∞–Ω–Ω—ã–µ';
const API_KEY = '';

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const totalObjectsEl = document.getElementById('totalObjects');
const goodCountEl = document.getElementById('goodCount');
const normalCountEl = document.getElementById('normalCount');
const badCountEl = document.getElementById('badCount');
const ruinsCountEl = document.getElementById('ruinsCount');
const notExistsCountEl = document.getElementById('notExistsCount');
const loadingEl = document.getElementById('loading');
const errorEl = document.getElementById('error');

// –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const iconImages = {
    '–ú–æ—Å—Ç': './images/bridge.svg',
    '–¶–µ—Ä–∫–æ–≤—å': './images/church.svg',
    '–î–≤–æ—Ä–µ—Ü': './images/palace.svg',
    '–î–æ–º–∏–∫': './images/house.svg',
    '–ú–Ω–æ–≥–æ—ç—Ç–∞–∂–∫–∞': './images/apartment.svg',
    '–í–æ—Ä–æ—Ç–∞': './images/gate.svg',
    '–°–∞—Ä–∞–π': './images/barn.svg',
    '–ê–Ω—Å–∞–º–±–ª—å': './images/ensemble.svg'
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allObjects = [];
let currentObjects = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL Google Sheets API
function getGoogleSheetsUrl() {
    return `https://docs.google.com/spreadsheets/d/${SPREADSHEET_ID}/gviz/tq?tqx=out:csv&sheet=${SHEET_NAME}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV –¥–∞–Ω–Ω—ã—Ö
function parseCSV(csvText) {
    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ CSV –¥–∞–Ω–Ω—ã–µ:', csvText.substring(0, 500) + '...');
    
    const lines = csvText.split('\n');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:', lines.length);
    
    if (lines.length === 0) {
        console.error('CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π');
        return [];
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ CSV —Å—Ç—Ä–æ–∫–∏
    function parseCSVLine(line) {
        const result = [];
        let current = '';
        let inQuotes = false;
        
        for (let i = 0; i < line.length; i++) {
            const char = line[i];
            
            if (char === '"') {
                inQuotes = !inQuotes;
            } else if (char === ',' && !inQuotes) {
                result.push(current.trim());
                current = '';
            } else {
                current += char;
            }
        }
        
        result.push(current.trim());
        return result.map(item => item.replace(/^"|"$/g, ''));
    }
    
    const headers = parseCSVLine(lines[0]);
    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    
    const data = [];
    
    for (let i = 1; i < lines.length; i++) {
        if (lines[i].trim()) {
            const values = parseCSVLine(lines[i]);
            const row = {};
            headers.forEach((header, index) => {
                row[header] = values[index] || '';
            });
            data.push(row);
        }
    }
    
    console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏):', data.slice(0, 3));
    return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
function getCondition(status) {
    if (!status) return 'unknown';
    
    const statusLower = status.toLowerCase().trim();
    
    if (statusLower === '–≥–æ—Ç–æ–≤–æ' || statusLower === '—Ö–æ—Ä–æ—à–µ–µ' || statusLower.includes('—Ö–æ—Ä–æ—à') || statusLower.includes('–Ω–æ—Ä–º–∞–ª—å–Ω')) return 'good';
    if (statusLower === '–ø—Ä–æ–≤–µ—Ä—è–µ–º' || statusLower.includes('–ø—Ä–æ–≤–µ—Ä—è') || statusLower.includes('—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω')) return 'normal';
    if (statusLower === '–ø–ª–æ—Ö–æ–µ' || statusLower.includes('–ø–ª–æ—Ö') || statusLower.includes('–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω')) return 'bad';
    if (statusLower === '—Ä—É–∏–Ω—ã' || statusLower.includes('—Ä—É–∏–Ω')) return 'ruins';
    if (statusLower === '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' || statusLower.includes('–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) return 'not-exists';
    
    return 'normal'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –ø–æ –≥–æ–¥—É
function getPeriod(year) {
    if (!year || year === '') return 'after-1940';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ–¥–∞
    const yearStr = year.toString().toLowerCase();
    let yearNum;
    
    if (yearStr.includes('–∫–æ–Ω–µ—Ü') && yearStr.includes('xix')) {
        yearNum = 1890;
    } else if (yearStr.includes('–Ω–∞—á–∞–ª–æ') && yearStr.includes('xix')) {
        yearNum = 1810;
    } else if (yearStr.includes('—Å–µ—Ä–µ–¥–∏–Ω–∞') && yearStr.includes('xix')) {
        yearNum = 1850;
    } else if (yearStr.includes('–≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞') && yearStr.includes('xix')) {
        yearNum = 1870;
    } else if (yearStr.includes('–ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞') && yearStr.includes('xix')) {
        yearNum = 1830;
    } else {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–µ 4 —Ü–∏—Ñ—Ä—ã
        const match = yearStr.match(/\d{4}/);
        if (match) {
            yearNum = parseInt(match[0]);
        } else {
            return 'after-1940'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }
    
    if (yearNum < 1800) return 'before-1800';
    if (yearNum >= 1800 && yearNum < 1850) return '1800-1850';
    if (yearNum >= 1850 && yearNum < 1880) return '1850-1880';
    if (yearNum >= 1880 && yearNum < 1900) return '1880-1900';
    if (yearNum >= 1900 && yearNum < 1940) return '1900-1940';
    return 'after-1940';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∏
function getIconEmoji(iconType) {
    const emojiMap = {
        '–ú–æ—Å—Ç': 'üåâ',
        '–¶–µ—Ä–∫–æ–≤—å': '‚õ™',
        '–î–≤–æ—Ä–µ—Ü': 'üèõÔ∏è',
        '–î–æ–º–∏–∫': 'üè†',
        '–ú–Ω–æ–≥–æ—ç—Ç–∞–∂–∫–∞': 'üè¢',
        '–í–æ—Ä–æ—Ç–∞': 'üö™',
        '–°–∞—Ä–∞–π': 'üèöÔ∏è',
        '–ê–Ω—Å–∞–º–±–ª—å': 'üèòÔ∏è'
    };
    
    return emojiMap[iconType] || 'üè¢';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
function analyzeData(data) {
    console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:', data.length);
    
    const stats = {
        total: 0,
        good: 0,
        normal: 0,
        bad: 0,
        ruins: 0,
        'not-exists': 0
    };
    
    const objects = [];
    
    data.forEach((row, index) => {
        const cityValue = row['–ì–æ—Ä–æ–¥'] || row['A'] || '';
        
        if (cityValue && cityValue.trim() !== '' && cityValue.toLowerCase().includes('–∫–∞–º–µ–Ω—Å–∫')) {
            stats.total++;
            
            const iconValue = row['–ò–∫–æ–Ω–∫–∞'] || '–î–æ–º–∏–∫';
            const condition = getCondition(row['–°—Ç–∞—Ç—É—Å'] || row['–°–æ—Å—Ç–æ—è–Ω–∏–µ'] || '');
            const year = row['–ì–æ–¥'] || '';
            const period = getPeriod(year);
            
            const object = {
                id: row['–ù–æ–º–µ—Ä'] || index,
                name: row['–ù–∞–∑–≤–∞–Ω–∏–µ'] || row['C'] || '–û–±—ä–µ–∫—Ç –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è',
                year: year,
                period: period,
                condition: condition,
                icon: iconValue,
                address: row['–ê–¥—Ä–µ—Å'] || row['D'] || '',
                status: row['–°—Ç–∞—Ç—É—Å'] || row['–°–æ—Å—Ç–æ—è–Ω–∏–µ'] || '–Ω–µ —É–∫–∞–∑–∞–Ω',
                telegramLink: row['–ü–æ—Å—Ç'] || '#',
                number: row['–ù–æ–º–µ—Ä'] || ''
            };
            
            objects.push(object);
            
            if (stats.hasOwnProperty(condition)) {
                stats[condition]++;
            }
        }
    });
    
    console.log('–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
    console.log('–û–±—ä–µ–∫—Ç—ã:', objects);
    
    return { stats, objects };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä–µ–∫—Ç–∞
function createObjectCard(object) {
    const card = document.createElement('div');
    card.className = `object-card ${object.condition}`;
    card.dataset.objectId = object.id;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–∫–æ–Ω–∫—É
    const iconType = object.icon || '–î–æ–º–∏–∫';
    const imageUrl = iconImages[iconType];
    
    if (imageUrl) {
        const image = document.createElement('img');
        image.className = 'object-image';
        image.src = imageUrl;
        image.alt = iconType;
        image.onerror = function() {
            this.style.display = 'none';
            const icon = document.createElement('div');
            icon.className = 'object-icon';
            icon.textContent = getIconEmoji(iconType);
            card.insertBefore(icon, card.firstChild);
        };
        card.appendChild(image);
    } else {
        const icon = document.createElement('div');
        icon.className = 'object-icon';
        icon.textContent = getIconEmoji(iconType);
        card.appendChild(icon);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    card.addEventListener('click', () => showObjectModal(object));
    
    return card;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–µ—Ç–∫–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
function displayObjectsGrid(objects) {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã
    const periodIds = ['before-1800', '1800-1850', '1850-1880', '1880-1900', '1900-1940', 'after-1940'];
    periodIds.forEach(periodId => {
        const container = document.getElementById(`period-${periodId}`);
        if (container) {
            container.innerHTML = '';
        }
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    const objectsByPeriod = {};
    objects.forEach(object => {
        const period = object.period;
        if (!objectsByPeriod[period]) {
            objectsByPeriod[period] = [];
        }
        objectsByPeriod[period].push(object);
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö
    Object.keys(objectsByPeriod).forEach(period => {
        const container = document.getElementById(`period-${period}`);
        if (container) {
            objectsByPeriod[period].forEach(object => {
                const card = createObjectCard(object);
                container.appendChild(card);
            });
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –±–µ–∑ –æ–±—ä–µ–∫—Ç–æ–≤
            const periodGroup = container.closest('.period-group');
            if (objectsByPeriod[period].length === 0) {
                periodGroup.style.display = 'none';
            } else {
                periodGroup.style.display = 'block';
            }
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function showObjectModal(object) {
    const modal = document.getElementById('objectModal');
    const modalTitle = document.getElementById('modalTitle');
    const modalPeriod = document.getElementById('modalPeriod');
    const modalIcon = document.getElementById('modalIcon');
    const modalAddress = document.getElementById('modalAddress');
    const modalStatus = document.getElementById('modalStatus');
    const modalYear = document.getElementById('modalYear');
    const modalNumber = document.getElementById('modalNumber');
    const modalTelegramLink = document.getElementById('modalTelegramLink');
    const modalPhoto = document.getElementById('modalPhoto');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    modalTitle.textContent = object.name;
    modalPeriod.textContent = object.period.replace('-', '‚Äî');
    modalAddress.textContent = object.address;
    modalStatus.textContent = object.status;
    modalYear.textContent = object.year || '–Ω–µ —É–∫–∞–∑–∞–Ω';
    modalNumber.textContent = object.number || '–Ω–µ —É–∫–∞–∑–∞–Ω';
    
    // –ò–∫–æ–Ω–∫–∞
    const iconType = object.icon || '–î–æ–º–∏–∫';
    const imageUrl = iconImages[iconType];
    if (imageUrl) {
        modalIcon.src = imageUrl;
        modalIcon.alt = iconType;
    }
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram
    if (object.telegramLink && object.telegramLink !== '#') {
        modalTelegramLink.href = object.telegramLink;
        modalTelegramLink.style.display = 'inline-flex';
    } else {
        modalTelegramLink.style.display = 'none';
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–∫–∞ —á—Ç–æ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
    modalPhoto.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.classList.add('show');
    modal.style.display = 'flex';
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = 'hidden';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    const modal = document.getElementById('objectModal');
    modal.classList.remove('show');
    
    setTimeout(() => {
        modal.style.display = 'none';
        document.body.style.overflow = '';
    }, 300);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
function updateUI(data) {
    loadingEl.style.display = 'none';
    errorEl.style.display = 'none';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
    allObjects = data.objects;
    currentObjects = data.objects;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    animateNumber(totalObjectsEl, data.stats.total);
    animateNumber(goodCountEl, data.stats.good);
    animateNumber(normalCountEl, data.stats.normal);
    animateNumber(badCountEl, data.stats.bad);
    animateNumber(ruinsCountEl, data.stats.ruins);
    animateNumber(notExistsCountEl, data.stats['not-exists']);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –≥—Ä–∏–¥–µ
    displayObjectsGrid(data.objects);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∏—Å–µ–ª
function animateNumber(element, targetValue) {
    const duration = 2000;
    const startValue = 0;
    const startTime = performance.now();
    
    function updateNumber(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        const easeOutQuart = 1 - Math.pow(1 - progress, 4);
        const currentValue = Math.floor(startValue + (targetValue - startValue) * easeOutQuart);
        
        element.textContent = currentValue.toLocaleString('ru-RU');
        
        if (progress < 1) {
            requestAnimationFrame(updateNumber);
        }
    }
    
    requestAnimationFrame(updateNumber);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
function showError(message) {
    loadingEl.style.display = 'none';
    errorEl.style.display = 'block';
    errorEl.querySelector('#errorMessage').textContent = message;
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', message);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
        
        loadingEl.style.display = 'block';
        errorEl.style.display = 'none';
        
        const url = getGoogleSheetsUrl();
        console.log('URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', url);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000);
        
        const response = await fetch(url, {
            signal: controller.signal,
            method: 'GET',
            headers: {
                'Accept': 'text/csv,application/json',
                'Cache-Control': 'no-cache'
            }
        });
        
        clearTimeout(timeoutId);
        
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const csvText = await response.text();
        
        if (!csvText || csvText.trim() === '') {
            throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
        
        const data = parseCSV(csvText);
        
        if (data.length === 0) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        const analyzedData = analyzeData(data);
        updateUI(analyzedData);
        
    } catch (error) {
        console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (typeof loadTestData === 'function') {
            loadTestData();
        } else {
            if (error.name === 'AbortError') {
                showError('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
            } else {
                showError(error.message + ' (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)');
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function startAutoRefresh() {
    setInterval(loadData, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', () => {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
    loadData();
    startAutoRefresh();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filterTabs = document.querySelectorAll('.filter-tab');
    filterTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            filterTabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            // –ü–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç
            if (tab.dataset.filter === 'condition') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
                displayObjectsGrid(allObjects);
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const viewBtns = document.querySelectorAll('.view-btn');
    viewBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            viewBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            // –ü–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ—á–Ω—ã–π –≤–∏–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if (btn.dataset.view === 'list') {
                displayObjectsGrid(currentObjects);
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeModal();
        }
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
window.loadData = loadData;
window.closeModal = closeModal;